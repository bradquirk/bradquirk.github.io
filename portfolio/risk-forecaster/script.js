var formatInteger = d3.format("d"),
    oldUserStories50th = 0,
    oldUserStories85th = 0,
    oldUserStories95th = 0,
    oldSprints50th = 0,
    oldSprints85th = 0,
    oldSprints95th = 0;
outputData = updateData();
var cadenceWidth = d3.select("#cadenceType1").node().getBoundingClientRect().width - 3 * parseFloat($("#cadenceType1").css("padding-left")),
    cadenceHeight = d3.select("#cadenceType1").node().getBoundingClientRect().height;
for (i = 1; i <= 10; i++) d3.select("#cadenceType" + i).append("svg").attr("width", cadenceWidth).attr("height", cadenceHeight).append("text").text("Sprint " + i).attr("y", cadenceHeight / 2).attr("dy", "0.35em").style("fill", "white");
var margin = { top: 20, right: 20, bottom: 20, left: 20 },
    width = d3.select("#chart").node().getBoundingClientRect().width - margin.left - margin.right,
    height = d3.select("#dataInput").node().getBoundingClientRect().height - 3 * margin.top - margin.bottom,
    storiesSVG = d3.select("#chartStories").append("svg").attr("width", width).attr("transform", "translate(" + margin.left + ",0)"),
    gradientSVG = d3.select("#chartGradient").append("svg").attr("width", width).attr("height", .2 * (height + margin.top + margin.bottom)).attr("transform", "translate(" + margin.left + ",0)"),
    percentageSVG = d3.select("#chartPercentage").append("svg").attr("width", width).attr("transform", "translate(" + margin.left + ",0)"),
    xAxisColour = d3.scaleSequential().interpolator(piecewise(d3.interpolateRgb, ["#D85D6C", "#E8BF61", "#2EB86B"])).domain([0, 1]),
    xAxisRange = d3.scaleLinear().range([0, 1]).domain([0, 1]),
    xAxis = d3.scaleLinear().range([0, width]).domain([0, 1]),
    defs = gradientSVG.append("defs"),
    linearGradientSprints = defs.append("linearGradient").attr("id", "gradientSprints").attr("x1", "0%").attr("y1", "0%").attr("x2", "100%").attr("y2", "0"),
    linearGradientStories = defs.append("linearGradient").attr("id", "gradientStories").attr("x1", "0%").attr("y1", "0%").attr("x2", "100%").attr("y2", "0");

function cadenceTypeChange() { var t, e, a, i = d3.select("#configCadenceTypeButton")._groups[0][0].textContent; "Sprints" == i ? (t = "Sprint", e = "Days", a = 10) : "Days" == i ? (t = "Day", e = "Hours", a = 8) : "Weeks" == i ? (t = "Week", e = "Days", a = 5) : "Months" == i && (t = "Month", e = "Days", a = 20), void 0 === t && (t = "Sprint", e = "Days", a = 10); for (var r = 1; r <= 10; r++) d3.select("#cadenceType" + r).select("text").text(t + " " + r), d3.select("#inputLength" + r).transition().duration(2500).on("start", function() { d3.active(this).attrTween("value", function() { var t = d3.select(this).property("value"); return d3.interpolateRound(t, a) }) });
    d3.select("#configCadenceLength").transition().duration(2500).on("start", function() { d3.active(this).attrTween("value", function() { var t = d3.select(this).property("value"); return d3.interpolateRound(t, a) }) }), d3.select("#labelConfigCadenceLength").html(t + " Length <br>(Work " + e + ")"), d3.select("#labelInputLength").html(t + " Length <br>(Work " + e + ")"), updateChart() }

function leastSquares(t, e, a, i) { "object" == typeof a && (i = a, a = !1), void 0 === i && (i = {}); for (var r = 0, n = 0, s = 0, o = 0, l = t.length, d = 0; d < l; ++d) r += t[d], n += e[d], s += t[d] * e[d], o += t[d] * t[d]; if (i.m = (s - r * n / l) / (o - r * r / l), i.b = n / l - i.m * r / l, a) { for (var p = 0, x = 0; x < l; ++x) p += (e[x] - i.b - i.m * t[x]) * (e[x] - i.b - i.m * t[x]); var u = l * o - r * r,
            h = 1 / (l - 2) * p;
        i.bErr = Math.sqrt(h / u * o), i.mErr = Math.sqrt(l / u * h) } return function(t) { return i.m * t + i.b } }

function closestValue(t, e) { for (var a = e[0], i = Math.abs(t - a), r = 0; r < e.length; r++) { var n = Math.abs(t - e[r]);
        n < i && (i = n, a = e[r]) } return a }

function pathTween(t, e) { return function() { for (var a = this, i = a.cloneNode(), r = a.getTotalLength(), n = (i.setAttribute("d", t), i).getTotalLength(), s = [0], o = 0, l = e / Math.max(r, n);
            (o += l) < 1;) s.push(o);
        s.push(1); var d = s.map(function(t) { var e = a.getPointAtLength(t * r),
                s = i.getPointAtLength(t * n); return d3.interpolate([e.x, e.y], [s.x, s.y]) }); return function(e) { return e < 1 ? "M" + d.map(function(t) { return t(e) }).join("L") : t } } }

function piecewise(t, e) { for (var a = 0, i = e.length - 1, r = e[0], n = new Array(i < 0 ? 0 : i); a < i;) n[a] = t(r, r = e[++a]); return function(t) { var e = Math.max(0, Math.min(i - 1, Math.floor(t *= i))); return n[e](t - e) } }

function updateData() { for (var t = +d3.select("#configWorkItems").property("value"), e = parseFloat(d3.select("#configGoalFocus").property("value")) / 100, a = +d3.select("#configCadenceLength").property("value"), i = d3.select("#configCadenceType").select("button")._groups[0][0].textContent, r = d3.select("#configConstraintType").select("button")._groups[0][0].textContent, n = d3.select("#configWorkItemType").select("button")._groups[0][0].textContent, s = 0, o = [], l = 1; l <= 10; l++) + d3.select("#inputThroughput" + l).property("value") > 0 && (s++, o.push(+d3.select("#inputLength" + l).property("value") / +d3.select("#inputThroughput" + l).property("value")));
    o.sort((t, e) => d3.ascending(t, e)); var d = [],
        p = [],
        x = []; for (l = 0; l < s; l++) d.push({ x: o[l], fX: +(.05 + 1 / s * l).toFixed(2) }), p.push(Math.log(o[l])), x.push(Math.log(-Math.log(1 - +(.05 + 1 / s * l).toFixed(2)))); var u = {};
    leastSquares(p, x, !0, u), step = (d3.max(d, t => t.x) - d3.min(d, t => t.x)) / 1e3, yIntercept = u.b, shape = u.m, scale = Math.pow(Math.E, -yIntercept / shape); var h = [],
        c = [],
        g = []; for (l = 0; l < 1e3; l++) h.push(parseFloat((l * step).toFixed(3))), g.push(shape / scale * Math.pow(h[l] / scale, shape - 1) * Math.pow(Math.E, -Math.pow(h[l] / scale, shape))), c.push(1 - Math.pow(Math.E, -Math.pow(h[l] / scale, shape))); var f = 0,
        y = 0,
        m = []; for (l = 0; l < 1e4; l++) { for (var D = 0; D < s; D++) f += h[c.indexOf(closestValue(Math.random(), c))];
        y = f / s, "Scope" == r ? (m.push(Math.ceil(t * y / (e * a))), d3.select("#labelConfigWorkItems").text("No. of " + n)) : "Time" == r && (m.push(Math.floor(t * e * a / y)), d3.select("#labelConfigWorkItems").text("No. of " + i)), f = 0 } var C = d3.nest().key(t => t).rollup(t => ({ total: t.length })).entries(m); if (C.sort((t, e) => d3.ascending(+t.key, +e.key)), C.forEach((t, e) => { t.value.confidencePDF = t.value.total / m.length, "Scope" == r ? t.value.confidenceCDF = 0 == e ? t.value.confidencePDF : t.value.confidencePDF + C[e - 1].value.confidenceCDF : "Time" == r && (t.value.confidenceCDF = 0 == e ? 1 : C[e - 1].value.confidenceCDF - t.value.confidencePDF) }), "Scope" == r) { C.sprints10th = +C.find(t => t.value.confidenceCDF >= .1).key, C.sprints20th = +C.find(t => t.value.confidenceCDF >= .2).key, C.sprints30th = +C.find(t => t.value.confidenceCDF >= .3).key, C.sprints40th = +C.find(t => t.value.confidenceCDF >= .4).key, C.sprints50th = +C.find(t => t.value.confidenceCDF >= .5).key, C.sprints60th = +C.find(t => t.value.confidenceCDF >= .6).key, C.sprints70th = +C.find(t => t.value.confidenceCDF >= .7).key, C.sprints80th = +C.find(t => t.value.confidenceCDF >= .8).key, C.sprints85th = +C.find(t => t.value.confidenceCDF >= .85).key, C.sprints90th = +C.find(t => t.value.confidenceCDF >= .9).key, C.sprints95th = +C.find(t => t.value.confidenceCDF >= .95).key; var S = "Stories",
            A = i;
        C.sprints50th, C.sprints85th, C.sprints95th } else "Time" == r && (C.stories10th = +C.find(t => t.value.confidenceCDF <= .1).key, C.stories20th = +C.find(t => t.value.confidenceCDF <= .2).key, C.stories30th = +C.find(t => t.value.confidenceCDF <= .3).key, C.stories40th = +C.find(t => t.value.confidenceCDF <= .4).key, C.stories50th = +C.find(t => t.value.confidenceCDF <= .5).key, C.stories60th = +C.find(t => t.value.confidenceCDF <= .6).key, C.stories70th = +C.find(t => t.value.confidenceCDF <= .7).key, C.stories80th = +C.find(t => t.value.confidenceCDF <= .8).key, C.stories85th = +C.find(t => t.value.confidenceCDF <= .85).key, C.stories90th = +C.find(t => t.value.confidenceCDF <= .9).key, C.stories95th = +C.find(t => t.value.confidenceCDF <= .95).key, S = "Sprints", A = n, C.stories50th, C.stories85th, C.stories95th); return d3.select("#input-simDataNoStoriesHeader").html("No. of " + S), d3.select("#input-simDataNoStoriesHeader").html("No. of " + S), d3.select("text#xAxisLabel").html("Number of " + A), C }

function updateOutputPercentage(t, e) { d3.select(t).transition().duration(2500).on("start", function() { d3.active(this).tween("text", function() { var t = d3.select(this),
                a = d3.interpolateNumber(t.text(), e); return function(e) { t.text(formatPercentage(a(e))) } }) }) }

function updateOutputInteger(t, e, a) { var i, r = d3.select("#configConstraintType").select("button")._groups[0][0].textContent;
    i = "Scope" == r && "story" == a || "Time" == r && "sprint" == a ? "#FDBB32" : "white", d3.select(t).transition().duration(2500).style("color", i).on("start", function() { d3.active(this).tween("text", function() { var t = d3.select(this),
                a = d3.interpolateNumber(t.text(), e); return function(e) { t.html(formatInteger(a(e))) } }) }) }

function updateChart() { var t = d3.select("#configConstraintType").select("button")._groups[0][0].textContent;
    outputData = updateData(), console.log(outputData), console.log(xAxisRange.domain()), console.log(xAxisRange(outputData.sprints50th)), "Scope" == t ? (xAxisRange.domain(d3.extent(outputData, t => +t.key)), xAxis.domain(d3.extent(outputData, t => +t.key)), d3.select("#gradSprintsLeft").transition().duration(1e3).attr("offset", 0), d3.select("#gradSprints1st").transition().duration(1e3).attr("offset", xAxisRange(outputData.sprints50th)), d3.select("#gradSprints2nd").transition().duration(1e3).attr("offset", xAxisRange(outputData.sprints85th)), d3.select("#gradSprints3rd").transition().duration(1e3).attr("offset", xAxisRange(outputData.sprints95th)), d3.select("#gradSprintsRight").transition().duration(1e3).attr("offset", 1), gradient.attr("opacity", 0), gradient.attr("fill", "url(#gradientSprints)").attr("opacity", 1), stories50th.transition().duration(1e3).attr("x", xAxis(outputData.sprints50th)).text(outputData.sprints50th), stories85th.transition().duration(1e3).attr("x", xAxis(outputData.sprints85th)).text(outputData.sprints85th), stories95th.transition().duration(1e3).attr("x", xAxis(outputData.sprints95th)).text(outputData.sprints95th), line50th.transition().duration(1e3).attr("x1", xAxis(outputData.sprints50th)).attr("x2", xAxis(outputData.sprints50th)), line85th.transition().duration(1e3).attr("x1", xAxis(outputData.sprints85th)).attr("x2", xAxis(outputData.sprints85th)), line95th.transition().duration(1e3).attr("x1", xAxis(outputData.sprints95th)).attr("x2", xAxis(outputData.sprints95th)), percentage50th.transition().duration(1e3).attr("x", xAxis(outputData.sprints50th)).text("50%"), percentage85th.transition().duration(1e3).attr("x", xAxis(outputData.sprints85th)).text("85%"), percentage95th.transition().duration(1e3).attr("x", xAxis(outputData.sprints95th)).text("95%"), storiesLeftValue.style("fill", xAxisColour(0)).text(xAxis.domain()[0]), storiesRightValue.style("fill", xAxisColour(1)).text(xAxis.domain()[1]), storiesLeftText.style("fill", xAxisColour(0)).text("Sprints"), storiesRightText.style("fill", xAxisColour(1)).text("Sprints"), percentageLeftText.style("fill", xAxisColour(0)).text("Low Confidence"), percentageRightText.style("fill", xAxisColour(1)).text("High Confidence"), percentageLeftVal.style("fill", xAxisColour(0)).text("0%"), percentageRightVal.style("fill", xAxisColour(1)).text("100%")) : "Time" == t && (xAxisRange.domain(d3.extent(outputData, t => +t.key)), xAxis.domain(d3.extent(outputData, t => +t.key)), console.log("xAxisRange(outputData.stories95th): " + xAxisRange(outputData.stories95th)), console.log("xAxisRange(outputData.stories85th): " + xAxisRange(outputData.stories85th)), console.log("xAxisRange(outputData.stories50th): " + xAxisRange(outputData.stories50th)), d3.select("#gradStoriesLeft").transition().duration(1e3).attr("offset", 0), d3.select("#gradStories1st").transition().duration(1e3).attr("offset", xAxisRange(outputData.stories95th)), d3.select("#gradStories2nd").transition().duration(1e3).attr("offset", xAxisRange(outputData.stories85th)), d3.select("#gradStories3rd").transition().duration(1e3).attr("offset", xAxisRange(outputData.stories50th)), d3.select("#gradStoriesRight").transition().duration(1e3).attr("offset", 1), gradient.attr("opacity", 0), gradient.attr("fill", "url(#gradientStories)").attr("opacity", 1), stories50th.transition().duration(1e3).attr("x", xAxis(outputData.stories50th)).text(outputData.stories50th), stories85th.transition().duration(1e3).attr("x", xAxis(outputData.stories85th)).text(outputData.stories85th), stories95th.transition().duration(1e3).attr("x", xAxis(outputData.stories95th)).text(outputData.stories95th), line50th.transition().duration(1e3).attr("x1", xAxis(outputData.stories50th)).attr("x2", xAxis(outputData.stories50th)), line85th.transition().duration(1e3).attr("x1", xAxis(outputData.stories85th)).attr("x2", xAxis(outputData.stories85th)), line95th.transition().duration(1e3).attr("x1", xAxis(outputData.stories95th)).attr("x2", xAxis(outputData.stories95th)), percentage50th.transition().duration(1e3).attr("x", xAxis(outputData.stories50th)).text("50%"), percentage85th.transition().duration(1e3).attr("x", xAxis(outputData.stories85th)).text("85%"), percentage95th.transition().duration(1e3).attr("x", xAxis(outputData.stories95th)).text("95%"), storiesLeftValue.style("fill", xAxisColour(1)).text(xAxis.domain()[1]), storiesRightValue.style("fill", xAxisColour(0)).text(xAxis.domain()[0]), storiesLeftText.style("fill", xAxisColour(1)).text("Stories"), storiesRightText.style("fill", xAxisColour(0)).text("Stories"), percentageLeftText.style("fill", xAxisColour(1)).text("High Confidence"), percentageRightText.style("fill", xAxisColour(0)).text("Low Confidence"), percentageLeftVal.style("fill", xAxisColour(1)).text("100%"), percentageRightVal.style("fill", xAxisColour(0)).text("0%")) }

function updateMouseOver(t, e) {}
linearGradientSprints.append("stop").attr("id", "gradSprintsLeft").attr("offset", 0).attr("stop-color", xAxisColour(0)), linearGradientSprints.append("stop").attr("id", "gradSprints1st").attr("offset", .5).attr("stop-color", xAxisColour(.5)), linearGradientSprints.append("stop").attr("id", "gradSprints2nd").attr("offset", .85).attr("stop-color", xAxisColour(.85)), linearGradientSprints.append("stop").attr("id", "gradSprints3rd").attr("offset", .95).attr("stop-color", xAxisColour(.95)), linearGradientSprints.append("stop").attr("id", "gradSprintsRight").attr("offset", 1).attr("stop-color", xAxisColour(1)), linearGradientStories.append("stop").attr("id", "gradStoriesLeft").attr("offset", 0).attr("stop-color", xAxisColour(1)), linearGradientStories.append("stop").attr("id", "gradStories1st").attr("offset", .05).attr("stop-color", xAxisColour(.95)), linearGradientStories.append("stop").attr("id", "gradStories2nd").attr("offset", .15).attr("stop-color", xAxisColour(.85)), linearGradientStories.append("stop").attr("id", "gradStories3rd").attr("offset", .5).attr("stop-color", xAxisColour(.5)), linearGradientStories.append("stop").attr("id", "gradStoriesRight").attr("offset", 1).attr("stop-color", xAxisColour(0)), percentage50th = percentageSVG.append("text").attr("dominant-baseline", "baseline").attr("x", 0).style("fill", "white").text("50%"), percentage85th = percentageSVG.append("text").attr("dominant-baseline", "baseline").attr("x", 0).style("fill", "white").text("85%"), percentage95th = percentageSVG.append("text").attr("dominant-baseline", "baseline").attr("x", 0).style("fill", "white").text("95%"), stories50th = storiesSVG.append("text").attr("dominant-baseline", "hanging").attr("x", 0).attr("dy", "0.35em").style("fill", "white"), stories85th = storiesSVG.append("text").attr("dominant-baseline", "hanging").attr("x", 0).attr("dy", "0.35em").style("fill", "white"), stories95th = storiesSVG.append("text").attr("dominant-baseline", "hanging").attr("x", 0).attr("dy", "0.35em").style("fill", "white"), textHeight = percentage50th.node().getBBox().height, textWidth = percentage50th.node().getBBox().width, storiesSVG.attr("height", 3 * textHeight), percentageSVG.attr("height", 3 * textHeight), percentage50th.attr("y", 3 * textHeight - 5), percentage85th.attr("y", 3 * textHeight - 5), percentage95th.attr("y", 3 * textHeight - 5), percentageLeftVal = percentageSVG.append("text").attr("dominant-baseline", "baseline").attr("x", 0).attr("y", 3 * textHeight).attr("dy", "-0.35em").style("fill", xAxisColour(0)), percentageLeftText = percentageSVG.append("text").attr("dominant-baseline", "baseline").attr("x", 0).attr("y", 2 * textHeight).attr("dy", "-0.35em").style("fill", xAxisColour(0)), percentageRightVal = percentageSVG.append("text").attr("dominant-baseline", "baseline").attr("text-anchor", "end").attr("x", $("#chart").width() - margin.left - margin.right).attr("y", 3 * textHeight).attr("dy", "-0.35em").style("fill", xAxisColour(1)), percentageRightText = percentageSVG.append("text").attr("dominant-baseline", "baseline").attr("text-anchor", "end").attr("x", $("#chart").width() - margin.left - margin.right).attr("y", 2 * textHeight).attr("dy", "-0.35em").style("fill", xAxisColour(1)), storiesLeftValue = storiesSVG.append("text").attr("dominant-baseline", "hanging").attr("x", 0).attr("dy", "0.35em").style("fill", xAxisColour(0)).style("text-anchor", "start"), storiesLeftText = storiesSVG.append("text").attr("dominant-baseline", "hanging").attr("x", 0).attr("y", textHeight).attr("dy", "0.35em").style("fill", xAxisColour(0)).style("text-anchor", "start").text("Sprints"), storiesRightValue = storiesSVG.append("text").attr("dominant-baseline", "hanging").attr("x", $("#chart").width() - margin.left - margin.right).attr("dy", "0.35em").style("fill", xAxisColour(1)).style("text-anchor", "end"), storiesRightText = storiesSVG.append("text").attr("dominant-baseline", "hanging").attr("x", $("#chart").width() - margin.left - margin.right).attr("y", textHeight).attr("dy", "0.35em").style("fill", xAxisColour(1)).style("text-anchor", "end").text("Sprints"), gradient = gradientSVG.append("rect").attr("width", $("#chart").width() - margin.left - margin.right).attr("height", .2 * (height + margin.top + margin.bottom)).attr("fill", "url(#gradientSprints)"), line50th = gradientSVG.append("line").attr("x1", 0).attr("x2", 0).attr("y1", $("#chart").height()).attr("y2", 0).style("stroke", "white").style("stroke-width", "2"), line85th = gradientSVG.append("line").attr("x1", 0).attr("x2", 0).attr("y1", $("#chart").height()).attr("y2", 0).style("stroke", "white").style("stroke-width", "2"), line95th = gradientSVG.append("line").attr("x1", 0).attr("x2", 0).attr("y1", $("#chart").height()).attr("y2", 0).style("stroke", "white").style("stroke-width", "2"), updateChart();