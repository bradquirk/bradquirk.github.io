d3.csv("data.csv").then(function(t) { var e = d3.utcParse("%Y-%m-%dT%H:%M:%S"),
        a = d3.timeFormat("%Y-%m-%d"),
        r = d3.format(".2p"),
        o = d3.timeParse("%Y-%m-%d"),
        n = a(e(0));
    t.forEach(t => { t.historyDate = a(e(t["History End"])), t.key = t.Key, t.historyKey = t.key + t["History End"], t.ToDoIn = parseFloat(t["To Do In"]), t.ToDoOut = parseFloat(t["To Do Out"]), t.InProgressIn = parseFloat(t["In Progress In"]), t.InProgressOut = parseFloat(t["In Progress Out"]), t.DoneIn = parseFloat(t["Done In"]), t.DoneOut = parseFloat(t["Done Out"]) }); var s = d3.nest().key(t => t.historyDate).sortKeys(d3.ascending).key(t => t.historyKey).rollup(t => ({ ToDoIn: d3.max(t, t => t.ToDoIn), ToDoOut: d3.max(t, t => t.ToDoOut), InProgressIn: d3.max(t, t => t.InProgressIn), InProgressOut: d3.max(t, t => t.InProgressOut), DoneIn: d3.max(t, t => t.DoneIn), DoneOut: d3.max(t, t => t.DoneOut) })).entries(t);
    s[0].key == n && s.shift(); var d = d3.nest().key(t => t.key).rollup(t => ({ ToDoIn: d3.sum(t[0].values, t => t.value.ToDoIn), ToDoOut: d3.sum(t[0].values, t => t.value.ToDoOut), InProgressIn: d3.sum(t[0].values, t => t.value.InProgressIn), InProgressOut: d3.sum(t[0].values, t => t.value.InProgressOut), DoneIn: d3.sum(t[0].values, t => t.value.DoneIn), DoneOut: d3.sum(t[0].values, t => t.value.DoneOut) })).entries(s),
        l = 0,
        c = 0,
        y = 0;
    d.forEach((t, e) => { l += d[e].value.ToDoIn - d[e].value.ToDoOut, c += d[e].value.InProgressIn - d[e].value.InProgressOut, y += d[e].value.DoneIn - d[e].value.DoneOut, t.key = o(t.key), t.toDo = l, t.inProgress = c, t.done = y, delete t.value }); var g = 0;
    d.forEach((t, e) => { g = t.toDo + t.inProgress + t.done, t.toDoPercentage = t.toDo / g, t.inProgressPercentage = t.inProgress / g, t.donePercentage = t.done / g }), d3.bisector(t => t.key).right; var p = { top: 20, right: 50, bottom: 40, left: 50 },
        x = d3.select("#volumeChart").node().getBoundingClientRect().width - p.left - p.right,
        u = .3 * $(window).innerHeight();
    textHeightOffset = 0; var m = d3.select("#volumeChart").append("svg").attr("width", x + p.left + p.right).attr("height", u + p.top + p.bottom),
        P = m.append("g").attr("transform", "translate(" + p.left + "," + p.top + ")"),
        h = m.append("defs"),
        f = h.append("linearGradient").attr("id", "toDoVolumeGradient").attr("x1", "0%").attr("x2", "100%").attr("y1", "0%").attr("y2", "0%");
    f.append("stop").attr("class", "toDoStart").attr("offset", "0%").attr("stop-opacity", 1), f.append("stop").attr("class", "toDoEnd").attr("offset", "100%").attr("stop-opacity", 1); var D = h.append("linearGradient").attr("id", "inProgressVolumeGradient").attr("x1", "0%").attr("x2", "100%").attr("y1", "0%").attr("y2", "0%");
    D.append("stop").attr("class", "inProgressStart").attr("offset", "0%").attr("stop-opacity", 1), D.append("stop").attr("class", "inProgressEnd").attr("offset", "100%").attr("stop-opacity", 1); var v = h.append("linearGradient").attr("id", "doneVolumeGradient").attr("x1", "0%").attr("x2", "100%").attr("y1", "0%").attr("y2", "0%");
    v.append("stop").attr("class", "doneStart").attr("offset", "0%").attr("stop-opacity", 1), v.append("stop").attr("class", "doneEnd").attr("offset", "100%").attr("stop-opacity", 1); var T = d3.scaleTime().rangeRound([0, x]),
        B = d3.scaleLinear().rangeRound([u, 0]),
        I = d3.area().x(t => T(t.key)).y0(t => B(t.inProgress + t.done)).y1(t => B(t.toDo + t.inProgress + t.done)),
        k = d3.area().x(t => T(t.key)).y0(t => B(t.done)).y1(t => B(t.inProgress + t.done)),
        O = d3.area().x(t => T(t.key)).y0(u).y1(t => B(t.done)),
        V = d3.line().x(t => T(t.key)).y(t => B(t.toDo + t.inProgress + t.done)),
        w = d3.line().x(t => T(t.key)).y(t => B(t.inProgress + t.done)),
        L = d3.line().x(t => T(t.key)).y(t => B(t.done));
    P.append("path").attr("id", "toDo").style("fill", "url(#toDoVolumeGradient)"), P.append("path").attr("id", "inProgress").style("fill", "url(#inProgressVolumeGradient)"), P.append("path").attr("id", "done").style("fill", "url(#doneVolumeGradient)"), P.append("g").attr("id", "x").attr("class", "axis").attr("transform", "translate(0," + u + ")"), P.append("g").attr("id", "y").attr("class", "axis").append("text").attr("fill", "#FFF").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", "0.71em").attr("text-anchor", "end").text("No. of Work Items"); var F = P.append("path").attr("id", "toDoVolumeLine").attr("class", "mouseLine"),
        G = P.append("path").attr("id", "inProgressVolumeLine").attr("class", "mouseLine"),
        A = P.append("path").attr("id", "doneVolumeLine").attr("class", "mouseLine"),
        R = d3.select("#percentageChart").append("svg").attr("width", x + p.left + p.right).attr("height", u + p.top + p.bottom),
        E = R.append("g").attr("transform", "translate(" + p.left + "," + p.top + ")"),
        b = R.append("defs"),
        H = b.append("linearGradient").attr("id", "toDoPercentageGradient").attr("x1", "0%").attr("x2", "100%").attr("y1", "0%").attr("y2", "0%");
    H.append("stop").attr("class", "toDoStart").attr("offset", "0%").attr("stop-opacity", 1), H.append("stop").attr("class", "toDoEnd").attr("offset", "100%").attr("stop-opacity", 1); var C = b.append("linearGradient").attr("id", "inProgressPercentageGradient").attr("x1", "0%").attr("x2", "100%").attr("y1", "0%").attr("y2", "0%");
    C.append("stop").attr("class", "inProgressStart").attr("offset", "0%").attr("stop-opacity", 1), C.append("stop").attr("class", "inProgressEnd").attr("offset", "100%").attr("stop-opacity", 1); var S = b.append("linearGradient").attr("id", "donePercentageGradient").attr("x1", "0%").attr("x2", "100%").attr("y1", "0%").attr("y2", "0%");
    S.append("stop").attr("class", "doneStart").attr("offset", "0%").attr("stop-opacity", 1), S.append("stop").attr("class", "doneEnd").attr("offset", "100%").attr("stop-opacity", 1); var K = d3.scaleTime().rangeRound([0, x]),
        M = d3.scaleLinear().rangeRound([u, 0]),
        Y = d3.area().x(t => K(t.key)).y0(t => M(t.inProgressPercentage + t.donePercentage)).y1(t => M(t.toDoPercentage + t.inProgressPercentage + t.donePercentage)),
        N = d3.area().x(t => K(t.key)).y0(t => M(t.donePercentage)).y1(t => M(t.inProgressPercentage + t.donePercentage)),
        W = d3.area().x(t => K(t.key)).y0(u).y1(t => M(t.donePercentage)),
        j = d3.line().x(t => K(t.key)).y(t => M(t.toDoPercentage + t.inProgressPercentage + t.donePercentage)),
        X = d3.line().x(t => K(t.key)).y(t => M(t.inProgressPercentage + t.donePercentage)),
        q = d3.line().x(t => K(t.key)).y(t => M(t.donePercentage));
    K.domain(d3.extent(d, t => t.key)), M.domain([0, 1]), E.append("path").attr("id", "toDo").attr("class", "area").style("fill", "url(#toDoPercentageGradient)"), E.append("path").attr("id", "inProgress").attr("class", "area").style("fill", "url(#inProgressPercentageGradient)"), E.append("path").attr("id", "done").attr("class", "area").style("fill", "url(#donePercentageGradient)"), E.append("g").attr("id", "x").attr("class", "axis").attr("transform", "translate(0," + u + ")"), E.append("g").attr("id", "y").attr("class", "axis").append("text").attr("fill", "#FFF").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", "0.71em").attr("text-anchor", "end").text("% of Work Items"); var z = E.append("path").attr("id", "toDoPercentageLine").attr("class", "mouseLine"),
        J = E.append("path").attr("id", "inProgressPercentageLine").attr("class", "mouseLine"),
        Q = E.append("path").attr("id", "donePercentageLine").attr("class", "mouseLine");
    updateChart("All"); var U = m.append("g").attr("class", "mouse-over-effects").attr("transform", "translate(" + p.left + "," + p.top + ")"),
        Z = U.append("line").attr("class", "mouse-line").style("stroke-width", "1px").style("opacity", "0"),
        _ = U.selectAll("circle").data(["toDoVolume", "inProgressVolume", "doneVolume"]).enter().append("circle").attr("id", t => t).attr("r", 7).style("stroke-width", "1px").style("opacity", "0"),
        tt = U.selectAll("rect").data(["toDoVolume", "inProgressVolume", "doneVolume", "dateVolume"]).enter().append("rect").attr("id", t => t + "Rect").attr("class", "rectBackground"),
        et = U.selectAll("text").data(["toDoVolume", "inProgressVolume", "doneVolume", "dateVolume"]).enter().append("text").attr("id", t => t + "Text").style("fill", "white"),
        at = R.append("g").attr("class", "mouse-over-effects").attr("transform", "translate(" + p.left + "," + p.top + ")"),
        rt = at.append("line").attr("class", "mouse-line").style("stroke-width", "1px").style("opacity", "0"),
        ot = at.selectAll("circle").data(["toDoPercentage", "inProgressPercentage", "donePercentage"]).enter().append("circle").attr("id", t => t).attr("r", 7).style("stroke-width", "1px").style("opacity", "0"),
        nt = at.selectAll("rect").data(["toDoPercentage", "inProgressPercentage", "donePercentage", "datePercentage"]).enter().append("rect").attr("id", t => t + "Rect").attr("class", "rectBackground"),
        st = at.selectAll("text").data(["toDoPercentage", "inProgressPercentage", "donePercentage", "datePercentage"]).enter().append("text").attr("id", t => t + "Text").style("fill", "white");

    function updateChart(e) { if ("All" != e) var a = t.filter(t => t.projectName == e);
        else a = t; return (s = d3.nest().key(t => t.historyDate).sortKeys(d3.ascending).key(t => t.historyKey).rollup(t => ({ ToDoIn: d3.max(t, t => t.ToDoIn), ToDoOut: d3.max(t, t => t.ToDoOut), InProgressIn: d3.max(t, t => t.InProgressIn), InProgressOut: d3.max(t, t => t.InProgressOut), DoneIn: d3.max(t, t => t.DoneIn), DoneOut: d3.max(t, t => t.DoneOut) })).entries(a))[0].key == n && s.shift(), d = d3.nest().key(t => t.key).rollup(t => ({ ToDoIn: d3.sum(t[0].values, t => t.value.ToDoIn), ToDoOut: d3.sum(t[0].values, t => t.value.ToDoOut), InProgressIn: d3.sum(t[0].values, t => t.value.InProgressIn), InProgressOut: d3.sum(t[0].values, t => t.value.InProgressOut), DoneIn: d3.sum(t[0].values, t => t.value.DoneIn), DoneOut: d3.sum(t[0].values, t => t.value.DoneOut) })).entries(s), l = 0, c = 0, y = 0, d.forEach((t, e) => { l += d[e].value.ToDoIn - d[e].value.ToDoOut, c += d[e].value.InProgressIn - d[e].value.InProgressOut, y += d[e].value.DoneIn - d[e].value.DoneOut, t.key = o(t.key), t.toDo = l, t.inProgress = c, t.done = y, delete t.value }), g = 0, d.forEach((t, e) => { g = t.toDo + t.inProgress + t.done, t.toDoPercentage = t.toDo / g, t.inProgressPercentage = t.inProgress / g, t.donePercentage = t.done / g }), T.domain(d3.extent(d, t => t.key)), B.domain([0, d3.max(d, t => t.toDo + t.inProgress + t.done)]), P.select("#toDo").datum(d).attr("d", I), P.select("#inProgress").datum(d).attr("d", k), P.select("#done").datum(d).attr("d", O), P.select("#x").call(d3.axisBottom(T).tickFormat(d3.timeFormat("%b %y"))), P.select("#y").call(d3.axisLeft(B)), F.datum(d).attr("d", V), G.datum(d).attr("d", w), A.datum(d).attr("d", L), K.domain(d3.extent(d, t => t.key)), M.domain([0, 1]), E.select("#toDo").datum(d).attr("d", Y), E.select("#inProgress").datum(d).attr("d", N), E.select("#done").datum(d).attr("d", W), E.select("#x").call(d3.axisBottom(K)), E.select("#y").call(d3.axisLeft(M).tickFormat(d3.format(".0%"))), z.datum(d).attr("d", j), J.datum(d).attr("d", X), Q.datum(d).attr("d", q), d }

    function updateMouseOver(t, e) { var a = document.getElementById("volumeChart").offsetLeft + 14,
            o = F.node(),
            n = o.getTotalLength(),
            s = G.node(),
            d = s.getTotalLength(),
            l = A.node(),
            c = l.getTotalLength(),
            y = z.node(),
            g = y.getTotalLength(),
            x = J.node(),
            m = x.getTotalLength(),
            P = Q.node(),
            h = P.getTotalLength(),
            f = d3.bisector(t => t.key).right,
            D = Math.max(d3.select("text#doneVolumeText").node().getBBox().width, d3.select("text#inProgressVolumeText").node().getBBox().width, d3.select("text#toDoVolumeText").node().getBBox().width, d3.select("text#donePercentageText").node().getBBox().width, d3.select("text#inProgressPercentageText").node().getBBox().width, d3.select("text#toDoPercentageText").node().getBBox().width);
        Z.attr("x1", t[0]).attr("x2", t[0]).attr("y1", u).attr("y2", 0), rt.attr("x1", t[0]).attr("x2", t[0]).attr("y1", u).attr("y2", 0); var v = d3.event.pageX - a - p.left + 15,
            B = e[f(e, T.invert(v))]; for (d3.select("text#dateVolumeText").style("opacity", 1).attr("x", v).attr("y", u + p.bottom / 2).attr("text-anchor", "middle").text(d3.timeFormat("%d-%b-%y")(B.key)), d3.select("rect#dateVolumeRect").style("opacity", 1).attr("x", v).attr("y", u + p.bottom / 2).attr("width", d3.select("text#dateVolumeText").node().getBBox().width + 0).attr("height", d3.select("text#dateVolumeText").node().getBBox().height + 0).attr("transform", "translate(" + -d3.select("text#dateVolumeText").node().getBBox().width / 2 + "," + -18 + ")"), i = v; i < c && !((Y = l.getPointAtLength(i)).x >= v); i += 1); if (c - Y.x - D < 45) var I = -15 - d3.select("text#toDoVolumeText").node().getBBox().width,
            k = -15 - d3.select("text#inProgressVolumeText").node().getBBox().width,
            O = -15 - d3.select("text#doneVolumeText").node().getBBox().width,
            V = -15 - d3.select("text#toDoPercentageText").node().getBBox().width,
            w = -15 - d3.select("text#inProgressPercentageText").node().getBBox().width,
            L = -15 - d3.select("text#donePercentageText").node().getBBox().width;
        else I = 10, k = 10, O = 10, V = 10, w = 10, L = 10; var R = Y.y; for (d3.select("circle#doneVolume").style("opacity", 1).attr("cx", v).attr("cy", Y.y), d3.select("text#doneVolumeText").style("opacity", 1).attr("x", v).attr("y", Y.y).attr("dx", O).attr("dy", textHeightOffset).text("Done: " + B.done), d3.select("rect#doneVolumeRect").style("opacity", 1).attr("x", v).attr("y", Y.y).attr("width", d3.select("text#doneVolumeText").node().getBBox().width + 0).attr("height", d3.select("text#doneVolumeText").node().getBBox().height + 0).attr("transform", "translate(" + O + ",-12.5)"), i = v; i < d && !((Y = s.getPointAtLength(i)).x >= v); i += 1); var E = Y.y; if (R - E < 20) var b = -20 + R - E;
        else b = 0; for (d3.select("circle#inProgressVolume").style("opacity", 1).attr("cx", v).attr("cy", Y.y), d3.select("text#inProgressVolumeText").style("opacity", 1).attr("x", v).attr("y", Y.y).attr("dx", k).attr("dy", b + textHeightOffset).text("In Progress: " + B.inProgress), d3.select("rect#inProgressVolumeRect").style("opacity", 1).attr("x", v).attr("y", Y.y).attr("width", d3.select("text#inProgressVolumeText").node().getBBox().width + 0).attr("height", d3.select("text#inProgressVolumeText").node().getBBox().height + 0).attr("transform", "translate(" + k + "," + (-12.5 + b) + ")"), i = v; i < n && !((Y = o.getPointAtLength(i)).x >= v); i += 1); var H = Y.y; if (E + b - H < 20) var C = -20 + E + b - H;
        else C = 0; for (d3.select("circle#toDoVolume").style("opacity", 1).attr("cx", v).attr("cy", Y.y), d3.select("text#toDoVolumeText").style("opacity", 1).attr("x", v).attr("y", Y.y).attr("dx", I).attr("dy", C + textHeightOffset).text("To Do: " + B.toDo), d3.select("rect#toDoVolumeRect").style("opacity", 1).attr("x", v).attr("y", Y.y).attr("width", d3.select("text#toDoVolumeText").node().getBBox().width + 0).attr("height", d3.select("text#toDoVolumeText").node().getBBox().height + 0).attr("transform", "translate(" + I + "," + (-12.5 + C) + ")"), i = v; i < g && !((Y = y.getPointAtLength(i)).x >= v); i += 1); var S = Y.y; for (d3.select("circle#toDoPercentage").style("opacity", 1).attr("cx", v).attr("cy", Y.y), d3.select("text#toDoPercentageText").style("opacity", 1).attr("x", v).attr("y", Y.y).attr("dx", V).attr("dy", textHeightOffset).text("To Do %: " + r(B.toDoPercentage)), d3.select("rect#toDoPercentageRect").style("opacity", 1).attr("x", v).attr("y", Y.y).attr("width", d3.select("text#toDoPercentageText").node().getBBox().width + 0).attr("height", d3.select("text#toDoPercentageText").node().getBBox().height + 0).attr("transform", "translate(" + V + "," + -12.5 + ")"), d3.select("text#datePercentageText").style("opacity", 1).attr("x", v).attr("y", u + p.bottom / 2).attr("text-anchor", "middle").text(d3.timeFormat("%d-%b-%y")(B.key)), d3.select("rect#datePercentageRect").style("opacity", 1).attr("x", v).attr("y", u + p.bottom / 2).attr("width", d3.select("text#datePercentageText").node().getBBox().width + 0).attr("height", d3.select("text#datePercentageText").node().getBBox().height + 0).attr("transform", "translate(" + -d3.select("text#datePercentageText").node().getBBox().width / 2 + ",-18)"), i = v; i < m && !((Y = x.getPointAtLength(i)).x >= v); i += 1); var K = Y.y; if (K - S < 20) var M = 20 + S - K;
        else M = 0; for (d3.select("circle#inProgressPercentage").style("opacity", 1).attr("cx", v).attr("cy", Y.y), d3.select("text#inProgressPercentageText").style("opacity", 1).attr("x", v).attr("y", Y.y).attr("dx", w).attr("dy", M + textHeightOffset).text("In Progress %: " + r(B.inProgressPercentage)), d3.select("rect#inProgressPercentageRect").style("opacity", 1).attr("x", v).attr("y", Y.y).attr("width", d3.select("text#inProgressPercentageText").node().getBBox().width + 0).attr("height", d3.select("text#inProgressPercentageText").node().getBBox().height + 0).attr("transform", "translate(" + w + "," + (-12.5 + M) + ")"), i = v; i < h; i += 1) { var Y; if ((Y = P.getPointAtLength(i)).x >= v) break } var N = Y.y; if (N - K + M < 20) var W = 20 + K - M - N;
        else W = 0;
        d3.select("circle#donePercentage").style("opacity", 1).attr("cx", v).attr("cy", Y.y), d3.select("text#donePercentageText").style("opacity", 1).attr("x", v).attr("y", Y.y).attr("dx", L).attr("dy", W + textHeightOffset).text("Done %: " + r(B.donePercentage)), d3.select("rect#donePercentageRect").style("opacity", 1).attr("x", v).attr("y", Y.y).attr("width", d3.select("text#donePercentageText").node().getBBox().width + 0).attr("height", d3.select("text#donePercentageText").node().getBBox().height + 0).attr("transform", "translate(" + L + "," + (-12.5 + W) + ")") }
    U.append("rect").attr("width", x).attr("height", u).attr("fill", "none").attr("pointer-events", "all").on("mouseout", function() { Z.style("opacity", "0"), rt.style("opacity", "0"), _.style("opacity", "0"), ot.style("opacity", "0"), tt.style("opacity", "0"), et.style("opacity", "0"), st.style("opacity", "0"), nt.style("opacity", "0") }).on("mouseover", function() { Z.style("opacity", "1"), rt.style("opacity", "1"), _.style("opacity", "1"), ot.style("opacity", "1"), et.style("opacity", "1"), st.style("opacity", "1"), nt.style("opacity", "0.5") }).on("mousemove", function() { updateMouseOver(d3.mouse(this), d) }), at.append("rect").attr("width", x).attr("height", u).attr("fill", "none").attr("pointer-events", "all").on("mouseout", function() { Z.style("opacity", "0"), rt.style("opacity", "0"), _.style("opacity", "0"), ot.style("opacity", "0"), tt.style("opacity", "0"), et.style("opacity", "0"), st.style("opacity", "0"), nt.style("opacity", "0") }).on("mouseover", function() { Z.style("opacity", "1"), rt.style("opacity", "1"), _.style("opacity", "1"), ot.style("opacity", "1"), tt.style("opacity", "1"), et.style("opacity", "1"), st.style("opacity", "1"), nt.style("opacity", "0.5") }).on("mousemove", function() { updateMouseOver(d3.mouse(this), d) }), updateChart("All") });