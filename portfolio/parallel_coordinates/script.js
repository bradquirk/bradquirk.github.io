d3.csv("data.csv").then(function(e) { var t = d3.utcParse("%Y-%m-%dT%H:%M:%S"),
        n = d3.timeFormat("%Y-%m-%d"),
        i = (d3.timeParse("%Y-%m-%d"), d3.timeFormat("%e %b '%y"), n(t(0)), []);
    e = function addRealKey(e) { return e.forEach((t, n) => { var i = d3.max(e, e => +e.Key.substring(e.Key.indexOf("-") + 1, e.Key.length).length); for (key = t.Key.substring(0, t.Key.indexOf("-")), number = t.Key.substring(t.Key.indexOf("-") + 1, t.Key.length), k = number.length; k < i; k++) number = "0" + number;
            t.key = key + "-" + number }), e.sort((e, t) => { var n = e.Key.substring(0, e.Key.indexOf("-")),
                i = t.Key.substring(0, t.Key.indexOf("-")),
                a = +e.Key.substring(e.Key.indexOf("-") + 1, e.Key.length),
                r = +t.Key.substring(t.Key.indexOf("-") + 1, t.Key.length); return n < i ? -1 : n > i ? 1 : a < r ? -1 : a > r ? 1 : 0 }), e.forEach((e, t) => { e.index = t }), e }(e); var a = d3.select("#chart").node().getBoundingClientRect().width - 100 - 100,
        r = .4 * $(window).innerHeight() - 50 - 10,
        s = r - 2,
        c = window.devicePixelRatio || 1,
        l = d3.scaleSequential().interpolator(function piecewise(e, t) { for (var n = 0, i = t.length - 1, a = t[0], r = new Array(i < 0 ? 0 : i); n < i;) r[n] = e(a, a = t[++n]); return function(e) { var t = Math.max(0, Math.min(i - 1, Math.floor(e *= i))); return r[t](e - t) } }(d3.interpolateHcl, ["#A0FE65", "#FA016D"])).domain([0, e.length - 1]),
        o = { Number: { key: "Number", coerce: function(e) { return +e }, extent: d3.extent, within: function(e, t, n) { return t[0] <= n.scale(e) && n.scale(e) <= t[1] }, defaultScale: d3.scaleLinear().range([s, 0]) }, String: { key: "String", coerce: String, extent: function(e) { return e.sort() }, within: function(e, t, n) { return t[0] <= n.scale(e) && n.scale(e) <= t[1] }, defaultScale: d3.scalePoint().range([0, s]) }, Date: { key: "Date", coerce: function(e) { return new Date(e) }, extent: d3.extent, within: function(e, t, n) { return t[0] <= n.scale(e) && n.scale(e) <= t[1] }, defaultScale: d3.scaleTime().range([0, s]) } };
    i = function getUnique(e, t) { return e.map(e => e[t]).map((e, t, n) => n.indexOf(e) === t && t).filter(t => e[t]).map(t => e[t]) }(function createDimensions() { var t = []; return new Set(e.map(e => e.key)).size > 1 && t.push({ key: "key", description: "Jira Key", type: o.String, axis: d3.axisLeft().tickFormat(function(t, n) { if (n % Math.ceil(new Set(e.map(e => e.key)).size / 10) == 0) return t }) }), new Set(e.map(e => e["Epic Name"])).size > 1 && t.push({ key: "Epic Name", description: "Epic Name", type: o.String, axis: d3.axisLeft().tickFormat(function(t, n) { if (n % Math.ceil(new Set(e.map(e => e["Epic Name"])).size / 10) == 0) return t.substring(0, 15) + "..." }) }), new Set(e.map(e => e["Cost of Delay"])).size > 1 && t.push({ key: "Cost of Delay", description: "Cost of Delay", type: o.String, axis: d3.axisLeft().tickFormat(function(t, n) { if (n % Math.ceil(new Set(e.map(e => e["Cost of Delay"])).size / 10) == 0) return t }) }), new Set(e.map(e => e["Resolved Name"])).size > 1 && t.push({ key: "Resolved Name", description: "Resolution", type: o.String, axis: d3.axisLeft().tickFormat(function(t, n) { if (n % Math.ceil(new Set(e.map(e => e["Resolved Name"])).size / 10) == 0) return t }) }), new Set(e.map(e => e["Story Points"])).size > 1 && t.push({ key: "Story Points", description: "Story Points", type: o.Number, scale: d3.scaleSqrt().range([s, 0]) }), new Set(e.map(e => e["Cycle Time (Bus. Days)"])).size > 1 && t.push({ key: "Cycle Time (Bus. Days)", description: "Cycle Time", type: o.Number, scale: d3.scaleSqrt().range([s, 0]) }), new Set(e.map(e => e["Lead Time (Bus. Days)"])).size > 1 && t.push({ key: "Lead Time (Bus. Days)", description: "Lead Time", type: o.Number, scale: d3.scaleSqrt().range([s, 0]) }), new Set(e.map(e => e["Created Date"])).size > 1 && t.push({ key: "Created Date", description: "Created Date", type: o.Date }), new Set(e.map(e => e["First In Progress Date"])).size > 1 && t.push({ key: "First In Progress Date", description: "In Progress Date", type: o.Date }), new Set(e.map(e => e["Last Resolved Date"])).size > 1 && t.push({ key: "Last Resolved Date", description: "Resolved Date", type: o.Date }), t }(), "key"); var u = d3.scalePoint().domain(d3.range(i.length)).range([0, a]);
    $("#chart").height(r + 50 + 10), $("#table").height((r + 50 + 10) / 2); var d = d3.select("#chart"),
        p = d.append("svg").attr("width", a + 100 + 100).attr("height", r + 50 + 10).append("g").attr("transform", "translate(100,50)"),
        f = d.append("canvas").attr("width", a * c).attr("height", r * c).style("width", a + "px").style("height", r + "px").style("margin-top", "50px").style("margin-left", "100px").node().getContext("2d");
    f.globalAlpha = .1, f.lineWidth = 1.5, f.scale(c, c); var y = d3.select("#table").append("pre");
    e.forEach(function(e) { for (var t in i.forEach(function(t) { e[t.key] = e[t.key] ? t.type.coerce(e[t.key]) : null }), e) e[t] && e[t].length > 35 && (e[t] = e[t].slice(0, 36)) }), i.forEach(function(t) { "domain" in t || (t.domain = function d3_functor(e) { return "function" == typeof e ? e : function() { return e } }(t.type.extent)(e.map(function(e) { return e[t.key] }))), "scale" in t || (t.scale = t.type.defaultScale.copy()), t.scale.domain(t.domain) }), e = d3.shuffle(e); var h = renderQueue(function draw(e) { f.strokeStyle = l(e.index), f.beginPath(); var t = function project(e) { return i.map(function(t, n) { return t.key in e && null !== e[t.key] ? [u(n), t.scale(e[t.key])] : null }) }(e);
        t.forEach(function(e, n) { if (null !== e) 0 != n ? f.lineTo(e[0], e[1]) : f.moveTo(e[0], e[1]);
            else { if (n > 0) { var i = t[n - 1];
                    null !== i && (f.moveTo(i[0], i[1]), f.lineTo(i[0] + 6, i[1])) } if (n < t.length - 1) { var a = t[n + 1];
                    null !== a && f.moveTo(a[0] - 6, a[1]) } } }), f.stroke() }).rate(e.length / 50);
    f.clearRect(0, 0, a, r), h(e); var m = p.selectAll(".axis").data(i).enter().append("g").attr("class", function(e) { return "axis " + e.key.replace(/ /g, "_") }).attr("transform", function(e, t) { return "translate(" + u(t) + ")" });

    function brushstart() { d3.event.sourceEvent.stopPropagation() }

    function brush() { h.invalidate(); var t = [];
        p.selectAll(".axis .brush").filter(function(e) { return d3.brushSelection(this) }).each(function(e) { t.push({ dimension: e, extent: d3.brushSelection(this) }) }); var n = e.filter(function(e) { if (t.every(function(t) { var n = t.dimension; return n.type.within(e[n.key], t.extent, n) })) return !0 });
        p.selectAll(".axis").filter(function(e) { return t.indexOf(e) > -1 }).classed("active", !0).each(function(e, t) { var n = extents[t];
            d3.select(this).selectAll(".tick text").style("display", function(t) { var i = e.type.coerce(t); return e.type.within(i, n, e) ? null : "none" }) }), p.selectAll(".axis").filter(function(e) { return !(t.indexOf(e) > -1) }).classed("active", !1).selectAll(".tick text").style("display", null), f.clearRect(0, 0, a, r), h(n), y.text(d3.tsvFormat(n.slice())) }
    m.append("g").each(function(e) { var t = "axis" in e ? e.axis.scale(e.scale) : d3.axisLeft().scale(e.scale);
        d3.select(this).call(t) }).append("text").attr("class", "title").attr("text-anchor", "start").text(function(e) { return "description" in e ? e.description : e.key }), m.append("g").attr("class", "brush").each(function(e) { d3.select(this).call(e.brush = d3.brushY().extent([
            [-10, 0],
            [10, r]
        ]).on("start", brushstart).on("brush", brush).on("end", brush)) }).selectAll("rect").attr("x", -8).attr("width", 16), console.log(e.slice()), y.text(d3.tsvFormat(e.slice())) });